// this was generated by IntelliJ IDEA
// You Can remove it if you are using other compilers
package com.company;

// These are the imported Libraries
import java.util.*;
import javax.swing.*;
import java.io.IOException;


/*
 *
 *****************************************************************************************
 *
 *           Object Oriented Programming
 *           University Management System
 *
 *
 *          From: Qaiwan International University - UTM Franchise
 *
 *
 *           This code is written by:
 *
 *               Siroz Ali Taib
 *               Zheer Ardalan
 *               San Akram
 *               Ahmad Safaa
 *
 *           Section Two
 *           Third Year
 *
 *
 *          // We have collected all the classes in one file
 *              so that it would be easier you to compile and run!
 *
 *
 *          // What we have used in this project:
 *
 *              1-  Assignment statements
 *              2-  String, Scanner and JOptionPane class
 *              3-  Instance Fields, Accessor and Mutator Methods
 *              4-  Constructors
 *              5-  UML class diagram
 *              6-  Static Class Members
 *              7-  Passing and returning Objects to/from Methods
 *              8-  Array Lists [Mainly used in our application]
 *              9-  Passing Arrays As Arguments to Methods
 *              10- Returning Arrays from Methods
 *              11- String Arrays
 *              12- Arrays of Objects
 *              13- Association
 *              14- Aggregation
 *              15- Composition
 *              16- Inheritance
 *              17- Protected Members
 *              18- The Object Class
 *              19- Calling the Superclass Constructor
 *              20- Chains of Inheritance
 *              21- Polymorphism
 *              22- Casting variables
 *              23- public, private, protected and final modifiers
 *              24- error handling using try-catch exception
 *
 *
 *              // we also KNOW how these following topics are used or implemented,
 *              //      we have studied them carefully
 *              // but we thought they were not necessary for our topic so we didn't include them
 *              //      Vectors & Arrays: we thought that ArrayList was more efficient to use
 *              //      Two dimensional Arrays: this is unnecessary,
 *              //          we also didn't implement 2d arrays,
 *              //
 *
 *
 *
 * *****************************************************************************************
 * */


// this is the Section class
// this stores the section numbers in each course
// and each section has a list of students stored inside as arraylist variable "Aggregation" because it is Has-a relation
class Section{

    private final int sectionNum;
    private final ArrayList< StudentAccount > students;



    public Section(int n){

        sectionNum = n;
        students = new ArrayList<>();

    }



    public ArrayList<StudentAccount> getStudents() {
        return students;
    }

    // this is association relationship because we are using a function to sent object to another class
    public void setStudents(StudentAccount students) {
        this.students.add( students );
    }

    public int getSectionNum() {
        return sectionNum;
    }



}

// this is Grade Class which is Abstract
// Data abstraction is the process of hiding certain details and showing only essential information to the user.
// Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).
//Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).
abstract class Grade{

    public abstract void calcGrade(String x);

    public abstract double getGrade();

    public abstract void setGrade(double grade);

    double grade;
}

// this is subclass of the abstract parent class which is grade
// we need to declare the body of the methods in this subclass
class myGrade extends Grade{

    public void setGrade(double grade){
        this.grade = grade;
    }

    public double getGrade(){
        return grade;
    }

    // this function is used to calculate and generate a random grade and check which value it is between fail - A+
    public void calcGrade(String x){

        int min = 35;
        int max = 100;


        grade = (int)Math.floor(Math.random()*(max-min+1)+min);
        System.out.println();
        System.out.println();
        System.out.print( "     You grade for this course ["+ x +"]: " + grade + "  -  " );

        if(grade<50){
            System.out.println("Fail");
        }
        else if(grade>=50 && grade<60){
            System.out.println("D Grade");
        }
        else if(grade>=60 && grade<70){
            System.out.println("C Grade");
        }
        else if(grade>=70 && grade<80){
            System.out.println("B Grade");
        }
        else if(grade>=80 && grade<90){
            System.out.println("A Grade");
        }else if(grade>=90 && grade<=100){
            System.out.println("A+ Grade");
        }else{
            System.out.println("Invalid!");
        }

        System.out.println();
        System.out.println();

    }

}

// this is the Department class
// in this class we store the name of the department that a student is in
// from the constructor we initially set the department to null
// also the departmentName value is final
class Department{

    private final String departmentName;

    public String getDepartmentName() {
        return departmentName;
    }



    public Department(String d){
        departmentName = d;
    }
    public Department(){
        departmentName = "Null";
    }


}

// this is our Main/Base/Parent class which is Account
// we inherit other classes of users from this class
// this account stores the email, full name and password of a user
// we can set these values from constructor or setter methods
class Account{


    private String email;
    private String fullName;
    private String password;


    public Account(String e, String fn, String p){

        email = e;
        fullName = fn;
        password = p;

    }
    public Account(){

    }


    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }





}

// this is the StaffAccount class
// this class inherits from the Account class
// this stores the information of a staff and separates it from a student,
// so that we show the staff a different interface from the student account
// this child class stores the role of the staff and sends the email, fullName...
// and password to the parent class constructor using the "super()" method

class StaffAccount extends Account{


    public String getRole() {
        return role;
    }



    private final String role;

    public StaffAccount(String e, String fn, String p, String r){

        super(e, fn, p);
        role = r;
        
    }


}


// this is the StudentAccount class
// this class inherits from the Account class
// this stores the information of a student and separates it from a staff,
// so that we show the student a different interface from the staff account
// this child class stores; matrixID, age, studyYear
// also this student Has-a Department which is aggregation relation with Department class
// and students register in courses so we can say that a students owns a list courses which is composition relation to courses
// including the methods registerCourse() and dropCourse() to manipulate the courses that this student has registered
// and sends the email, fullName and password to the parent class constructor using the "super()" method
class StudentAccount extends Account{


    public String getMatricID() {
        return matricID;
    }

    public void setMatricID(String matricID) {
        this.matricID = matricID;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }



    public int getStudyYear() {
        return studyYear;
    }

    public void setStudyYear(int studyYear) {
        this.studyYear = studyYear;
    }

    private String matricID;
    private int age;
    private int studyYear;
    private Department myDepartment;
    private ArrayList<Courses> myCourses;




    public String getMyDepartment() {
        return myDepartment.getDepartmentName();
    }

    public void setMyDepartment(Department myDepartment) {
        this.myDepartment = myDepartment;
    }




    public StudentAccount(String e, String fn, String p){
        super(e, fn, p);

        myCourses = new ArrayList<>();
        myDepartment = new Department();
    }
    public StudentAccount(){
        super();
    }

    public ArrayList<Courses> getMyCourses() {
        return myCourses;
    }

    public void registerCourse(Courses myCourses) {

            this.myCourses.add(myCourses);

            System.out.println( myCourses.getCourseName() +" Course was registered successfully!");


    }

    public void dropACourse(int x){

        if( (x+1) > this.myCourses.size()){
            System.out.println("Wrong input number!");
        }else if(x < 0 ){
            System.out.println("Wrong input number!");
        }else {
            System.out.println("Course {" + this.myCourses.get(x).getCourseName() + " was dropped successfully!");
            this.myCourses.remove(x);
        }

    }

}

// this is Courses class
// this class stores the information of courses such as; courseName, courseCode and courseCredit
// also this class has-a list of section inside of it which is an aggregation relationship
// including the necessary getter and setter methods that is needed
class Courses{


    private String courseName;
    private String courseCode;
    private int courseCredit;
    private final ArrayList<Section> sections;


    public Courses(String n, String c, int credit){

        courseCode = c;
        courseName = n;
        courseCredit = credit;

        sections = new ArrayList<>();


    }
    public Courses(){
        sections = new ArrayList<>();

    }

    public ArrayList<Section> getSections() {
        return sections;
    }

    public void addSections(Section sectoins) {
        this.sections.add(sectoins);
    }

    public int getCourseCredit() {
        return courseCredit;
    }

    public void setCourseCredit(int courseCredit) {
        this.courseCredit = courseCredit;
    }

    public String getCourseName() {
        return courseName;
    }

    public void setCourseName(String courseName) {
        this.courseName = courseName;
    }

    public String getCourseCode() {
        return courseCode;
    }

    public void setCourseCode(String courseCode) {
        this.courseCode = courseCode;
    }







}




// this is our Main class
// we run our application through the main() method which is defined in this class
// the basic cmd interface to show the user what going on behind the scene is defined here in different functions with appropriate names
// in this class we have (in the order as they are defined);
//          loginn(), printMenu(), mainMenu(), viewInfo(), viewInfoTemp(), viewStaffInfo(),
//          viewAllStudents(), viewAllStudentsTemp(), addStudent(), doesStudentExist(), viewAllCourses(),
//          addCourse(), doesCourseExist(), viewAllSections(), createSection(), addStudentToCourseSection(),
//          blankSpace(), promptEnterKey(), staffMenu(), viewCourses(), registerCourses(), dropCourse(), main()
public class Main {


    private static String userType;
    private static int userIndex;
    public static Scanner cin2 = new Scanner(System.in);


    // this functions main purpose is to let the user login,
    // either if the user is staff or student
    // it uses JOptionPane to draw the interface of a small window so that the user can enter the email and passowrd
    // if the entered account belongs to staff then this function sets a value so that the user is shown a staff interface
    // if the entered account belongs to student then this function sets a value so that the user is shown a student interface
    // we also used while technique so that the user is repeatedly asked to enter email and password until they cancel or enter the correct info
    private static boolean loginn(ArrayList<StaffAccount> staffList, ArrayList<StudentAccount> studentList) {

        System.out.println("// Note: the login window might be behind the cmd window!");

        boolean loginStatus = false;
        JTextField email = new JTextField();
        JTextField password = new JPasswordField();
        Object[] message = {
                "Email:", email,
                "Password:", password
        };


        while (!loginStatus) {
            int option = JOptionPane.showConfirmDialog(null, message, "Login", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                // for staff


                for (int i = 0; i < staffList.size(); i++) {
                    if (email.getText().equals(staffList.get(i).getEmail()) && password.getText().equals(staffList.get(i).getPassword())) {
                        System.out.println("Login successful");
                        userType = "staff";
                        userIndex = i;
                        loginStatus = true;
                        return true;
                    }

                }
                // for student
                for (int i = 0; i < studentList.size(); i++) {

                    if (email.getText().equals(studentList.get(i).getEmail()) && password.getText().equals(studentList.get(i).getPassword())) {
                        System.out.println("Login successful");
                        userType = "student";
                        userIndex = i;
                        loginStatus = true;
                        return true;
                    }

                }


                System.out.println("Email or Password is Wrong!");
                loginStatus = false;


            } else {
                System.out.println("Login canceled");
                System.exit(0);
                loginStatus = false;
                return false;
            }
        }
        return false;
    }


    // this function is shown mainly for the students
    // it is the menu of options that the students can do using this application
    // they are shown a couple of options and they can enter one that they want
    // and the function will return the value to where the function was originally was called
    public static int printMenu(String n) {
        System.out.println("Welcome " + n + "!");
        System.out.println("1 - View Your Information.");
        System.out.println("2 - View Your Courses.");
        System.out.println("3 - Register Courses.");
        System.out.println("4 - Drop Courses.");
        System.out.println("5 - View a Course Grade");
        System.out.println("6 - Log out.");

        int choice;
        System.out.println();

        System.out.print("Your Choice --> ");
        choice = cin2.nextInt();
        cin2.nextLine();

        return choice;
    }


    // this is the main menu of our application
    // this is the first thing that the user can see
    // you can user this menu to switch from a student account to another or even to staff...
    public static int mainMenu() {

        System.out.println("1 - Log in.");
        System.out.println("2 - Exit Application.");

        int choice;
        System.out.println();


        System.out.print("Your Choice --> ");
        choice = cin2.nextInt();
        cin2.nextLine();



        return choice;
    }


    // we use this function in a few areas in the program
    // it is used to show the information of a particular student in a nice little interface
    // the function receives a studentAccount object as parameter and it prints out its information using get() method
    private static void viewInfo(StudentAccount s_a) {


        System.out.println("Here is the information for this student account!");
        System.out.println("................................................");
        System.out.println("    Full Name: " + s_a.getFullName());
        System.out.println("    Email: " + s_a.getEmail());
        System.out.println("    Age: " + s_a.getAge());
        System.out.println("    Matrix ID: " + s_a.getMatricID());
        System.out.println("    Department: " + s_a.getMyDepartment());
        System.out.println("    Study Year: " + s_a.getStudyYear());
        System.out.println("................................................");


    }

    // this function receives a studentAccount object as parameter and it prints out its information using get() method
    // this is a shortened version of the viewIndo() method that only shows the fullName, and email of a particular student
    private static void viewInfoTemp(StudentAccount s_a) {


        System.out.println("Here is the information for this student account!");
        System.out.println("................................................");
        System.out.println("    Full Name: " + s_a.getFullName());
        System.out.println("    Email: " + s_a.getEmail());
        System.out.println("................................................");


    }

    // the function receives a staffAccount object as parameter and it prints out its information using get() method
    // staff user can use this function to view his/her account information
    private static void viewStaffInfo(StaffAccount st_a) {

        System.out.println("Here is the information for this staff account!");
        System.out.println("................................................");
        System.out.println("    Full Name: " + st_a.getFullName());
        System.out.println("    Email: " + st_a.getEmail());
        System.out.println("    Role: " + st_a.getRole());
        System.out.println("................................................");

    }

    // when this function is called
    // it goes through a loop to show the list of all students
    // this is a long version of the viewIndo() method that  shows the full information of a particular student
    private static void viewAllStudents(ArrayList<StudentAccount> stu) {

        System.out.println("Here is the list of All Students:");
        System.out.println("................................................");
        for (int i = 0; i < stu.size(); i++) {

            System.out.println("Student #" + (i + 1));
            viewInfo(stu.get(i));
            System.out.println();

        }


    }

    // when this function is called
    // it goes through a loop to show the list of all students
    // this is a shortened version of the viewIndo() method that only shows the fullName, and email of a particular student
    private static void viewAllStudentsTemp(ArrayList<StudentAccount> stu) {

        System.out.println("Here is the list of All Students:");
        System.out.println("................................................");
        for (int i = 0; i < stu.size(); i++) {

            System.out.println("Student #" + (i + 1));
            viewInfoTemp(stu.get(i));
            System.out.println();

        }


    }

    // this function is used by staff to add a student
    // this function is called to prompt the user to enter the details of a student account
    // and it returns an instance object of the entered values
    private static StudentAccount addStudent() {

        StudentAccount tempData = new StudentAccount();
        System.out.println("Enter the information of the Student:");
        System.out.println("................................................");
        System.out.println();
        System.out.print("Student Full Name: ");
        tempData.setFullName(cin2.nextLine());
        System.out.print("Email: ");
        tempData.setEmail(cin2.nextLine());
        System.out.print("Age: ");
        tempData.setAge(cin2.nextInt());
        cin2.nextLine();
        System.out.print("Matrix ID: ");
        tempData.setMatricID(cin2.nextLine());
        System.out.print("Department: ");
        tempData.setMyDepartment(new Department(cin2.nextLine()));
        System.out.print("Study Year: ");
        tempData.setStudyYear(cin2.nextInt());
        cin2.nextLine();
        System.out.println("Enter a Password for this student Account: ");
        tempData.setPassword(cin2.nextLine());

        return tempData;

    }


    // this function checks if a student exists before removing
    // 1. the user is asked to enter the email of the student that they want to check
    // 2. the user enters the email
    // 3. the for loop goes through the list of students, if the student exists; return the index, else return -1 indication that it doesn't exist
    private static int doesStudentExist(ArrayList<StudentAccount> stu) {

        String tempEmail;

        System.out.println("Enter the Email of the Student that you want to remove: ");
        System.out.print(" --> ");
        tempEmail = cin2.nextLine();


        for (int i = 0; i < stu.size(); i++) {

            if (stu.get(i).getEmail().equals(tempEmail)) {

                System.out.println("Student (" + stu.get(i).getFullName() + ") was removed successfully!");
                return i;

            }

        }
        System.out.println("Student was not found!");
        return -1;

    }


    // this function is used to view all the information of the available courses
    private static void viewAllCourses(ArrayList<Courses> tempCourse) {

        if (tempCourse.size() == 0) {
            System.out.println("There are no courses!");
        } else {

            System.out.println("Here are the available Courses: ");
            System.out.println("................................................");
            for (int i = 0; i < tempCourse.size(); i++) {

                System.out.println("Course #" + (i + 1));
                System.out.println("Name: " + tempCourse.get(i).getCourseName());
                System.out.println("Code: " + tempCourse.get(i).getCourseCode());
                System.out.println("Credit: " + tempCourse.get(i).getCourseCredit());
                System.out.println();

            }
            System.out.println("................................................");
            System.out.println();

        }

    }

    // this function is used by staff to add a course
    // this function is called to prompt the user to enter the details of a course
    // and it returns an instance object of the entered values
    private static Courses addCourse() {

        Courses tempInput = new Courses();
        System.out.println("Enter the information of the Course:");
        System.out.println("................................................");
        System.out.print("Course Name: ");
        tempInput.setCourseName(cin2.nextLine());
        System.out.println("Course Code: ");
        tempInput.setCourseCode(cin2.nextLine());
        System.out.println("Course Credit: ");
        tempInput.setCourseCredit(cin2.nextInt());
        cin2.nextLine();

        return tempInput;
    }

    // this function checks if a course exists before removing
    // 1. the user is asked to enter the course ID of the course that they want to check
    // 2. the user enters the course ID
    // 3. the for loop goes through the courses, if the course exists; return the id, else return -1 indication that it doesn't exist
    private static int doesCourseExist(ArrayList<Courses> cou) {

        String tempID;

        System.out.println("Enter the Course ID of the Course that you want to remove: ");
        System.out.print(" --> ");
        tempID = cin2.nextLine();


        for (int i = 0; i < cou.size(); i++) {

            if (cou.get(i).getCourseCode().equals(tempID)) {

                System.out.println("Course (" + cou.get(i).getCourseName() + ") was removed successfully!");
                return i;

            }

        }
        System.out.println("Course was not found!");
        return -1;

    }


    // after this function is called (viewing all the sections in a course)
    // 1. the user/staff is shown the list of courses
    // 2. the user/staff selects one of the courses
    // 3. the user/staff is shown the list of sections in the selected course
    // 4. the user/staff selects one of the sections
    // 5. the program will show the list of students in the selected section (if there is any)
    private static void viewAllSections(ArrayList<Courses> cou) {

        System.out.println("Here are the List of Courses: ");
        System.out.println("................................................");
        for (int i = 0; i < cou.size(); i++) {
            System.out.print("Course #" + (i + 1) + ": ");
            System.out.print(cou.get(i).getCourseName());
            System.out.println(" - " + cou.get(i).getCourseCode());
        }

        System.out.println();

        int choiceCourse, sectionChoice;
        System.out.print("Which courses sections do you want to see: ");
        choiceCourse = cin2.nextInt();
        cin2.nextLine();

        System.out.println();

        ArrayList<Section> currentSections = cou.get(choiceCourse - 1).getSections();

        if (currentSections.size() == 0) {
            System.out.println("There are no Sections in this Course yet!");
        } else {

            System.out.println("Here are the Sections in " + cou.get(choiceCourse - 1).getCourseName() + ": ");
            System.out.println("................................................");
            for (Section currentSection : currentSections) {

                System.out.println("Sections number: " + currentSection.getSectionNum());

            }

            System.out.print("Which sections student list do you with to see: ");
            sectionChoice = cin2.nextInt();
            cin2.nextLine();

            ArrayList<StudentAccount> currentSecStudents = currentSections.get(sectionChoice - 1).getStudents();

            if (currentSecStudents.size() == 0) {

                System.out.println("There are no students in this sections yet!");

            }
            else
                {

                    System.out.println("Here is the list of students in this Section: ");
                    System.out.println("................................................");

                    for (int i = 0; i < currentSecStudents.size(); i++)
                        {

                            System.out.println((i + 1) + ". " + currentSecStudents.get(i).getFullName() +
                                    ", " + currentSecStudents.get(i).getMatricID() + ", " + currentSecStudents.get(i).getMyDepartment() +
                                    ", Year: " + currentSecStudents.get(i).getStudyYear());

                        }
                    System.out.println();
                    System.out.println("................................................");


                }


        }

    }

    // after this function is called (creating a section in a course)
    // 1. the user/staff is shown the list of courses
    // 2. the user/staff selects one of the courses
    // 3. a new section will be automatically created in the selected course
    private static void createSection(ArrayList<Courses> cou) {

        System.out.println("Here are the List of Courses: ");
        System.out.println("................................................");

        for (int i = 0; i < cou.size(); i++) {
            System.out.print("Course #" + (i + 1) + ": ");
            System.out.print(cou.get(i).getCourseName());
            System.out.println(" - " + cou.get(i).getCourseCode());
        }

        System.out.println();

        int choiceCourse;
        System.out.print("Which course do you want to select: ");
        choiceCourse = cin2.nextInt();
        cin2.nextLine();

        int numOfSections = cou.get(choiceCourse - 1).getSections().size();

        if (numOfSections == 0) {

            cou.get(choiceCourse - 1).addSections(new Section(1));
            System.out.println("Section one created successfully in this course.");
            System.out.println();

        } else {

            cou.get(choiceCourse - 1).addSections(new Section(numOfSections + 1));
            System.out.println("Section " + (numOfSections + 1) + " created successfully in this course.");
            System.out.println();

        }


    }



    // after this function is called (adding students to a section in a course)
    // 1. the user/staff is shown the list of courses
    // 2. the user/staff selects one of the courses
    // 3. the user/staff is shown the list of sections in the selected course
    // 4. the user/staff selects one of the sections
    // 5. the user/staff enters the email of the student that they want to add into the selected course
    // the user/staff can repeat the process or go back to the main menu
    private static void addStudentToCourseSection(ArrayList<Courses> cou, ArrayList<StudentAccount> stu) {

        System.out.println("Here are the List of Courses: ");
        System.out.println("................................................");
        for (int i = 0; i < cou.size(); i++) {
            System.out.print("Course #" + (i + 1) + ": ");
            System.out.print(cou.get(i).getCourseName());
            System.out.println(" - " + cou.get(i).getCourseCode());
        }

        System.out.println();

        int choiceCourse, sectionChoice;
        System.out.print("Which courses sections do you want to select: ");
        choiceCourse = cin2.nextInt();
        cin2.nextLine();

        System.out.println();

        if (cou.get(choiceCourse - 1).getSections().size() == 0) {
            System.out.println("There are no Sections in this Course yet!");
        } else {

            System.out.println("Here are the Sections in " + cou.get(choiceCourse - 1).getCourseName() + ": ");
            System.out.println("................................................");
            for (int i = 0; i < cou.get(choiceCourse - 1).getSections().size(); i++) {

                System.out.println("Sections number: " + cou.get(choiceCourse - 1).getSections().get(i).getSectionNum());

            }

            System.out.print("Which sections do you want to add students to: ");
            sectionChoice = cin2.nextInt();
            cin2.nextLine();

            viewAllStudentsTemp(stu);

            int choice = 0;
            int studentIndex = -1;
            String selectedEmail;
            while (choice != 2) {
                System.out.println("1. Add a Student.");
                System.out.println("2. Go to main Menu.");
                choice = cin2.nextInt();
                cin2.nextLine();
                if (choice == 1) {
                    System.out.print("Which student do you want to add to this section (Email): ");
                    selectedEmail = cin2.nextLine();


                    for (int i = 0; i < stu.size(); i++) {

                        if (stu.get(i).getEmail().equals(selectedEmail)) {

                            studentIndex = i;
                            System.out.println("The student was added successfully!");

                        }

                    }
                    if (studentIndex == -1) {

                        System.out.println("the email might be wrong!");

                    }

                    cou.get(choiceCourse - 1).getSections().get(sectionChoice - 1).setStudents(stu.get(studentIndex));


                }

            }
        }
    }

    // this function is used to print some empty lines to make the cmd interface more understandable
    public static void blankSpace() {

        System.out.println();
        System.out.println();
        System.out.println();
        System.out.println();
        System.out.println();

    }

    // this function is responsible for pausing the cmd output
    // until the user presses the Enter key...
    public static void promptEnterKey() {
        System.out.println("        Please Press the \"ENTER\" to continue......");
        try {
            System.in.read();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // this funciton is responsible for printing/drawing the menu for the staff user
    // and it returns the selected option which is inputted by the staff
    public static int staffMenu() {
        System.out.println();
        System.out.println(" Staff Menu:");
        System.out.println("................................................");
        System.out.println("   1  - View Your Account Information.");
        System.out.println("   2  - View All Students.");
        System.out.println("   3  - Add Student.");
        System.out.println("   4  - Remove Student.");
        System.out.println("   5  - View All Courses.");
        System.out.println("   6  - Add Course.");
        System.out.println("   7  - Remove Course.");
        System.out.println("   8  - View All Sections.");
        System.out.println("   9  - Create Section.");
        System.out.println("   10 - Add Students to a Section.");
        System.out.println("   11 - Create Time Table.");
        System.out.println("   12 - Log out.");
        System.out.println("................................................");

        int choice;
        System.out.println();

        System.out.print("Your Choice --> ");
        choice = cin2.nextInt();
        cin2.nextLine();

        return choice;


    }

    // this method is used to show the courses that a student has registered {if there is any...}
    public static void viewCourses(StudentAccount s_a) {

        if (s_a.getMyCourses().size() == 0) {
            System.out.println("                You have no Courses! ");
            System.out.println();
        } else {

            System.out.println("Your Courses: ");
            System.out.println("................................................");
            for (int i = 0; i < s_a.getMyCourses().size(); i++) {
                System.out.println("Course Name: " + s_a.getMyCourses().get(i).getCourseName());
                System.out.println("Course Code: " + s_a.getMyCourses().get(i).getCourseCode());
                System.out.println("Course Credit: " + s_a.getMyCourses().get(i).getCourseCredit());
                System.out.println();
            }
            System.out.println("................................................");
        }
    }

    // this method is used by a student to register a new course
    // 1. the user is shown the list of all available courses
    // 2. the user selects the index/number of the course that they want to register
    public static void registerCourses(ArrayList<Courses> tempCourse, StudentAccount s_a) {
        System.out.println("Here are the list of courses:");
        System.out.println();
        for (int i = 0; i < tempCourse.size(); i++) {

            System.out.println((i + 1) + ". Course Name: " + tempCourse.get(i).getCourseName());
            System.out.println("Course Code: " + tempCourse.get(i).getCourseCode());
            System.out.println("Course Credit: " + tempCourse.get(i).getCourseCredit());
            System.out.println();

        }
        System.out.println("which Course do you want to register -> ");
        int choiceC = cin2.nextInt();
        cin2.nextLine();

        s_a.registerCourse(tempCourse.get(choiceC - 1));

    }

    // when a student selects to drop a course
    // this function is called
    // 1. if they have courses; the user is shown the list of courses that they have registered
    // 2. the student enters the courses index that they want to drop
    // 3. the course will dropped and it will be removed from the students course list
    private static void dropCourse( StudentAccount s_a){



        if (s_a.getMyCourses().size() == 0) {
            System.out.println("                You have no Courses! ");
            System.out.println();
        } else {

            System.out.println("Your Courses: ");
            System.out.println("................................................");
            for (int i = 0; i < s_a.getMyCourses().size(); i++) {
                System.out.println( "Course " + (i+1) + ": " );
                System.out.println("Course Name: " + s_a.getMyCourses().get(i).getCourseName());
                System.out.println("Course Code: " + s_a.getMyCourses().get(i).getCourseCode());
                System.out.println("Course Credit: " + s_a.getMyCourses().get(i).getCourseCredit());
                System.out.println();
            }
            System.out.println("................................................");
            System.out.println("Enter the course number {index} you wish to drop: ");
            int selectedIndex = cin2.nextInt();
            cin2.nextLine();

            s_a.dropACourse(selectedIndex-1);



        }

    }


    // this method is used to show the grade of a course
    // 1. the user/student is shown the list of courses and they are prompted to select one
    // 2. then they are shown the grade for that particular list
    private static void viewGrade(StudentAccount s_a, myGrade m_g){

        if (s_a.getMyCourses().size() == 0) {
            System.out.println("                You have no Courses! ");
            System.out.println();
        } else {

            System.out.println("Your Courses: ");
            System.out.println("................................................");
            for (int i = 0; i < s_a.getMyCourses().size(); i++) {
                System.out.println("Course " + (i + 1) + ": ");
                System.out.println("Course Name: " + s_a.getMyCourses().get(i).getCourseName());
                System.out.println("Course Code: " + s_a.getMyCourses().get(i).getCourseCode());
                System.out.println("Course Credit: " + s_a.getMyCourses().get(i).getCourseCredit());
                System.out.println();
            }
            System.out.println("................................................");
            System.out.println("Enter the course number {index} you wish to see the Grade: ");
            int selectedIndex = cin2.nextInt();
            cin2.nextLine();

            m_g.calcGrade(s_a.getMyCourses().get(selectedIndex - 1).getCourseName());
        }

    }

    // this is the main function this is the first thing that the compiler will go through
    // everthing about the application will be called in from this function
    public static void main(String[] args) {

        // this is the try-catch error handling
        try {

            // students predefined list, can add more later.
            // this can be modified be staff members, add students or remove students from the list {ArrayList}
            ArrayList<StudentAccount> studentsList = new ArrayList<>();
            studentsList.add(new StudentAccount("sirostaib@gmail.com", "Siroz Ali Taib", "slaw"));
            studentsList.add(new StudentAccount("zheerardalan@gmail.com", "Zheer Ardalan Salih", "slaw"));
            studentsList.add(new StudentAccount("sanakram@gmail.com", "San Akram Ali", "slaw"));
            studentsList.add(new StudentAccount("ahmadsafaa@gmail.com", "Ahmad Safaa", "slaw"));
            studentsList.add(new StudentAccount("student", "Student Test", "student"));

            // this myGrade object here is defined to use the abstract method
            // the purpose is to store and show the students grade
            myGrade stGrade = new myGrade();

            // staff list, this cant be modified, so only authorized developers can add or remove staff members
            ArrayList<StaffAccount> staffList = new ArrayList<>();
            staffList.add(new StaffAccount("admin", "Administrator Test", "admin", "Adminstrator"));
            staffList.add(new StaffAccount("kanartariq@qaiwan.com", "Kanar R. Tariq", "Admin", "Staff"));
            staffList.add(new StaffAccount("mohamadtahir@qaiwan.com", "Mohamad Tahir", "Admin", "Staff"));

            // courses List, this can be modified by a staff member; add new courses, remove courses
            ArrayList<Courses> availableCourses = new ArrayList<>();
            availableCourses.add(new Courses("OOP", "SCSJ-2154", 4));
            availableCourses.add(new Courses("Application Development", "SCSJ-3104", 4));
            availableCourses.add(new Courses("Advanced English Language", "ULAB-3162", 2));
            availableCourses.add(new Courses("Probability & Statistical Data Analysis", "SCSI-1143", 3));


            int choiceStudent, choiceGeneral = 0, choiceStaff;
            int removeIndex = -1;


            while (choiceGeneral != 2) {

                choiceGeneral = mainMenu();

                if (choiceGeneral == 1) {

                    // if the user is logged in
                    if (loginn(staffList, studentsList)) {

                        // if the user is staff
                        if (userType.equals("staff")) {

                            choiceStaff = 0;

                            while (choiceStaff != 12) {

                                choiceStaff = staffMenu();

                                // choice 1 - View Your Account Information
                                if (choiceStaff == 1) {

                                    blankSpace();
                                    // this method will show the information of the current staff member
                                    viewStaffInfo((StaffAccount) staffList.get(userIndex));
                                    promptEnterKey();
                                    blankSpace();

                                    // choice 2 - View All Students
                                } else if (choiceStaff == 2) {

                                    blankSpace();
                                    // this method will show the list of all students
                                    viewAllStudents(studentsList);
                                    promptEnterKey();
                                    blankSpace();

                                    // choice 3 - Add Student.
                                } else if (choiceStaff == 3) {

                                    blankSpace();
                                    // using this method the staff can students to the application
                                    studentsList.add(addStudent());
                                    System.out.println("Student was added successfully!");
                                    System.out.println();
                                    promptEnterKey();
                                    blankSpace();

                                    // choice 4 - Remove Student
                                } else if (choiceStaff == 4) {

                                    blankSpace();
                                    removeIndex = doesStudentExist(studentsList);

                                    if (removeIndex != -1) {

                                        // using this method, the staff can remove students from the student list
                                        studentsList.remove(removeIndex);

                                    }
                                    promptEnterKey();
                                    blankSpace();

                                    // choice 5 - View All Courses
                                } else if (choiceStaff == 5) {

                                    blankSpace();
                                    // this methods prints the list of all available courses
                                    viewAllCourses(availableCourses);
                                    promptEnterKey();
                                    blankSpace();

                                    // choice 6 - Add Course.
                                } else if (choiceStaff == 6) {

                                    blankSpace();
                                    // using this method the staff can add a new course to the course list
                                    availableCourses.add(addCourse());
                                    promptEnterKey();
                                    blankSpace();

                                    // choice 7 - Remove Course
                                } else if (choiceStaff == 7) {

                                    blankSpace();
                                    // using this method the staff can remove a course from the course list
                                    removeIndex = doesCourseExist(availableCourses);
                                    if (removeIndex != -1)
                                        availableCourses.remove(removeIndex);
                                    promptEnterKey();
                                    blankSpace();

                                } else if (choiceStaff == 8) {


                                    blankSpace();
                                    // after calling the viewAllSections() method
                                    // the staff will be shown all the sections in a particular course
                                    // including the list of students in a particular section
                                    viewAllSections(availableCourses);
                                    promptEnterKey();
                                    blankSpace();


                                } else if (choiceStaff == 9) {

                                    blankSpace();
                                    // after calling the createSection() method
                                    // the staff can select a course
                                    // then they can create a section in that course
                                    createSection(availableCourses);
                                    promptEnterKey();
                                    blankSpace();

                                } else if (choiceStaff == 10) {

                                    blankSpace();
                                    // after calling the addStudentToCourseSection() method
                                    // the staff can select a course
                                    // then select a section in that course
                                    // then add a student by email to that section
                                    addStudentToCourseSection(availableCourses, studentsList);
                                    promptEnterKey();
                                    blankSpace();

                                } else if (choiceStaff == 11) {

                                    blankSpace();
                                    System.out.println("        [You should create a timetable here]. {Option not available for now}");
                                    promptEnterKey();
                                    blankSpace();

                                } else if (choiceStaff > 12) {

                                    // if the user inputs a wrong number out of the range
                                    System.out.println("Wrong input! Try again.");

                                } else if (choiceStaff < 1) {

                                    // if the user inputs a wrong number out of the range
                                    System.out.println("Wrong input! Try again.");

                                }

                            }

                            // if the logged in user is student
                        } else if (userType.equals("student")) {

                            choiceStudent = 0;

                            while (choiceStudent != 6) {

                                // we show the student menu and we set what choiceIndex they have chosen
                                choiceStudent = printMenu(studentsList.get(userIndex).getFullName());
                                choiceGeneral = choiceStudent;

                                // choice 1
                                // View your information
                                if (choiceStudent == 1) {

                                    blankSpace();
                                    // viewing the information of the selected student account
                                    // casting the returned object to a StudentAccount object
                                    viewInfo((StudentAccount) studentsList.get(userIndex));
                                    promptEnterKey();
                                    blankSpace();

                                    // Choice 2 view your courses
                                } else if (choiceStudent == 2) {


                                    blankSpace();
                                    // here we call the viewCourses() method
                                    // casting the returned object to a StudentAccount object
                                    viewCourses((StudentAccount) studentsList.get(userIndex));
                                    promptEnterKey();
                                    blankSpace();


                                    // Choice 3 register courses
                                } else if (choiceStudent == 3) {

                                    blankSpace();
                                    // here we call the registerCourses() method
                                    // casting the returned object to a StudentAccount object
                                    registerCourses(availableCourses, (StudentAccount) studentsList.get(userIndex));
                                    promptEnterKey();
                                    blankSpace();

                                    // choice 4 drop course
                                } else if (choiceStudent == 4) {

                                    blankSpace();
                                    // drop course
                                    dropCourse(studentsList.get(userIndex));
                                    promptEnterKey();
                                    blankSpace();

                                    // choice 5 view course grade
                                } else if (choiceStudent == 5) {

                                    blankSpace();
                                    viewGrade(studentsList.get(userIndex), stGrade);
                                    promptEnterKey();
                                    blankSpace();

                                } else if (choiceStudent > 6) {

                                    // if the user inputs a wrong number out of the range
                                    System.out.println("Wrong number!");

                                } else if (choiceStudent < 1) {

                                    // if the user inputs a wrong number out of the range
                                    System.out.println("Wrong number input!");

                                }


                            }
                        } else {
                            // just in case there is an error after loggin in this message will be printed
                            System.out.println("Wrong user! please log in again...");
                        }
                    } else {
                        System.out.println("the return was false!");
                    }
                }
            }


            // if there was an error during runtime this catch will show the error
    }catch(RuntimeException ex){
            System.out.println(ex.getMessage());
            // if there was an error this catch will show the error
    }catch(Exception ex){
            System.out.println(ex.getMessage());
        } finally {
            // this is the last part of the application
            // when the users selects to exit/quit application
            // this is the message that they will see before the cmd output compilation finishes
            System.out.println("Thanks for using our application!");
        }
    } }